/**
 * The template was taken form the Lexer and adjusted to be used with codeTable 
 * and init all the codes
 */
package interpreter;

import java.util.*;
import java.io.*;

/**
 *
 * @author ArtsemHoldvekht
 */
public class ByteCodeSetup 
{
    private String type, value; // token type/value for new token
    private BufferedReader in;
    private PrintWriter codeTable; // files used for new classes

    public static void main(String args[]) 
    {
        new ByteCodeSetup().initCodeTable();
    }

    ByteCodeSetup() 
    {
        try 
        {
            System.out.println("User's current working directory: " + System.getProperty("user.dir"));			
            String sep = System.getProperty("file.separator");
            in = new BufferedReader( new FileReader("interpreter" + sep + "ByteCodeList.txt"));
            codeTable = new PrintWriter(new FileOutputStream("interpreter" + sep + "CodeTable.java"));
        } 
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void getNextByteCode() throws IOException {
        try 
        {
            StringTokenizer st = new StringTokenizer(in.readLine());
            type = st.nextToken();
            value = st.nextToken();
        } 
        catch (NoSuchElementException e) 
        {
            System.out.println("***tokens file does not have 2 strings per line***");
            System.exit(1);
        } 
        catch (NullPointerException ne) 
        {
            // attempt to build new StringTokenizer when at end of file
            throw new IOException("***End of File***");
        }
    }
    
    public void initCodeTable()
    {
        codeTable.println("package interpreter;");
        codeTable.println(" ");
        codeTable.println("/**");
        codeTable.println(" *  This file is automatically generated<br>");
        codeTable.println(" *  it contains the table of mappings of byte codes");
        codeTable.println("*/");
        codeTable.println("public class TokenType {");
        codeTable.println("   public static java.util.HashMap<String,String> codeTable = new java.util.HashMap<String,String>();");
      
        while(true)
        {
            try 
            {
                getNextByteCode();
            }
            catch (Exception e) 
            {
                break;
            }
            
            String codeType = type;
            
            codeTable.println("  codeTable.put(" + codeType + " "+ value);
        }
        codeTable.println("   }");
        codeTable.println("}");
        codeTable.close();
        try 
        {
            in.close();
        } 
        catch (Exception e) 
        {
        }
    }
}


